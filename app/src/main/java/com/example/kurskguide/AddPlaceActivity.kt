package com.example.kurskguide

import android.os.Bundle
import android.view.View
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class AddPlaceActivity : AppCompatActivity() {

    private lateinit var etPlaceName: EditText
    private lateinit var etPlaceDescription: EditText
    private lateinit var etPlaceFullDescription: EditText
    private lateinit var etPlaceAddress: EditText
    private lateinit var etPlacePhone: EditText
    private lateinit var etPlaceWebsite: EditText
    private lateinit var etPlaceWorkingHours: EditText
    private lateinit var spinnerCategory: Spinner
    private lateinit var ratingBar: RatingBar
    private lateinit var btnSave: Button
    private lateinit var btnCancel: Button
    private lateinit var btnDetectAddress: Button
    private lateinit var progressBar: ProgressBar
    private lateinit var tvCoordinates: TextView

    private var latitude: Double = 0.0
    private var longitude: Double = 0.0

    private val categories = arrayOf(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Å—Ç–∞",
        "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞",
        "–ü–∞—Ä–∫–∏ –∏ —Å–∫–≤–µ—Ä—ã",
        "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ",
        "–¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã",
        "–¢–µ–∞—Ç—Ä—ã –∏ –∫–∏–Ω–æ",
        "–û—Ç–µ–ª–∏",
        "–•—Ä–∞–º—ã",
        "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_add_place)

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        latitude = intent.getDoubleExtra("latitude", 0.0)
        longitude = intent.getDoubleExtra("longitude", 0.0)

        title = "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ"
        supportActionBar?.setDisplayHomeAsUpEnabled(true)

        initViews()
        setupUI()

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        detectAddressAutomatically()
    }

    private fun initViews() {
        etPlaceName = findViewById(R.id.etPlaceName)
        etPlaceDescription = findViewById(R.id.etPlaceDescription)
        etPlaceFullDescription = findViewById(R.id.etPlaceFullDescription)
        etPlaceAddress = findViewById(R.id.etPlaceAddress)
        etPlacePhone = findViewById(R.id.etPlacePhone)
        etPlaceWebsite = findViewById(R.id.etPlaceWebsite)
        etPlaceWorkingHours = findViewById(R.id.etPlaceWorkingHours)
        spinnerCategory = findViewById(R.id.spinnerCategory)
        ratingBar = findViewById(R.id.ratingBar)
        btnSave = findViewById(R.id.btnSave)
        btnCancel = findViewById(R.id.btnCancel)
        btnDetectAddress = findViewById(R.id.btnDetectAddress)
        progressBar = findViewById(R.id.progressBar)
        tvCoordinates = findViewById(R.id.tvCoordinates)
    }

    private fun setupUI() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º spinner –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, categories)
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        spinnerCategory.adapter = adapter

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        tvCoordinates.text =
            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${String.format("%.6f", latitude)}, ${String.format("%.6f", longitude)}"

        btnSave.setOnClickListener {
            savePlace()
        }

        btnCancel.setOnClickListener {
            finish()
        }

        btnDetectAddress.setOnClickListener {
            detectAddress()
        }
    }

    private fun detectAddressAutomatically() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã
        detectAddress()
    }

    private fun detectAddress() {
        showAddressLoading(true)

        lifecycleScope.launch {
            val result = GeocodingHelper.getAddressFromCoordinates(
                context = this@AddPlaceActivity,
                latitude = latitude,
                longitude = longitude
            )

            withContext(Dispatchers.Main) {
                showAddressLoading(false)

                if (result.isSuccess && result.address.isNotEmpty()) {
                    etPlaceAddress.setText(result.address)
                    Toast.makeText(this@AddPlaceActivity, "‚úÖ –ê–¥—Ä–µ—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω", Toast.LENGTH_SHORT).show()
                } else {
                    val errorMessage = result.error ?: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å"
                    Toast.makeText(this@AddPlaceActivity, "‚ùå $errorMessage", Toast.LENGTH_LONG).show()
                    etPlaceAddress.hint = "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é"

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–æ–≥–∞—Ö
                    println("Geocoding failed: ${result.error}")
                }
            }
        }
    }

    private fun showAddressLoading(isLoading: Boolean) {
        if (isLoading) {
            progressBar.visibility = View.VISIBLE
            btnDetectAddress.isEnabled = false
            btnDetectAddress.text = "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ..."
            etPlaceAddress.hint = "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–¥—Ä–µ—Å..."
        } else {
            progressBar.visibility = View.GONE
            btnDetectAddress.isEnabled = true
            btnDetectAddress.text = "üéØ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å"
            if (etPlaceAddress.text.toString().isEmpty()) {
                etPlaceAddress.hint = "–ê–¥—Ä–µ—Å"
            }
        }
    }

    private fun savePlace() {
        val name = etPlaceName.text.toString().trim()
        val description = etPlaceDescription.text.toString().trim()
        val fullDescription = etPlaceFullDescription.text.toString().trim()
        val address = etPlaceAddress.text.toString().trim()
        val phone = etPlacePhone.text.toString().trim()
        val website = etPlaceWebsite.text.toString().trim()
        val workingHours = etPlaceWorkingHours.text.toString().trim()
        val category = categories[spinnerCategory.selectedItemPosition]
        val rating = ratingBar.rating

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (name.isEmpty()) {
            etPlaceName.error = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞"
            etPlaceName.requestFocus()
            return
        }

        if (description.isEmpty()) {
            etPlaceDescription.error = "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
            etPlaceDescription.requestFocus()
            return
        }

        if (address.isEmpty()) {
            etPlaceAddress.error = "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å'"
            etPlaceAddress.requestFocus()
            return
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
        val newPlace = Place(
            id = System.currentTimeMillis().toInt(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            name = name,
            description = description,
            fullDescription = if (fullDescription.isNotEmpty()) fullDescription else description,
            category = category,
            address = address,
            phone = phone,
            website = website,
            workingHours = workingHours,
            imageUrl = "",
            latitude = latitude,
            longitude = longitude,
            rating = rating
        )

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ
        if (KurskPlacesData.saveUserPlace(this, newPlace)) {
            Toast.makeText(this, "–ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", Toast.LENGTH_SHORT).show()
            setResult(RESULT_OK)
            finish()
        } else {
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Å—Ç–∞", Toast.LENGTH_SHORT).show()
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        onBackPressed()
        return true
    }
}